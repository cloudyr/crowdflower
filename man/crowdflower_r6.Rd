% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/R6.R
\docType{data}
\name{Job}
\alias{Contributor}
\alias{Job}
\title{Crowdflower Job R6 Class}
\format{An object of class \code{R6ClassGenerator} of length 24.}
\usage{
Job

Contributor
}
\description{
An R6 class for managing Crowdflower jobs using reference semantics
}
\details{
This is an experimental R6 interface for working with Crowdflower jobs. The advantage of using a \dQuote{Job}-class object to manage your Crowdflower operations is that the local object is always up-to-date with remote changes and operations can be performed without specifying a job identifier. The semantics of R6 are slightly different from traditional R code, but will quickly make sense after working through some examples.
}
\section{Methods}{

\itemize{
  \item \code{add_data(data, ...)} Add a data.frame or CSV file of data to a job using \code{\link{job_add_data}}
  \item \code{launch(channel = , units = 100)} Launch the job using \code{\link{job_launch}}.
  \item \code{pause()} Pause the job using \code{\link{job_pause}}
  \item \code{resume()} Resume the (paused) job using \code{\link{job_resume}}
  \item \code{cancel()} Cancel the job using \code{\link{job_cancel}}
  \item \code{get()} Get information about the job using \code{\link{job_get}}
  \item \code{get_unit(unit)} Get data on a given unit (row) from the job using \code{\link{results_get}}
  \item \code{get_results(n = Inf)} Return a specified number of results from the job using \code{\link{job_results_get}}. Default is all results.
  \item \code{get_report()} Return a report document using \code{\link{report_get}}. Default is the \dQuote{full} report.
  \item \code{report_regenerate()} Regenerate a report using \code{\link{report_regenerate}}.
  \item \code{contributor} Initialize a new R6 \dQuote{Contributor} object in order to \code{flag()}, \code{unflag()}, \code{reject()}, \code{bonus()}, or \code{notify()} a contributor (worker).
}
}

\section{Active Fields}{

Active fields are like list elements, but are \dQuote{active} meaning that they are updated against the Crowdflower API each time they accessed. This means that they are always current. They can also be set using the standard \code{<-} operator.
\itemize{
  \item \code{channels} A list of Crowdflower channels on which the job is available.
  \item \code{cml} The Crowdflower Markup Language (CML) describing the job
  \item \code{instructions} Instructions shown to the worker
  \item \code{legend} The legend text being displayed to workers for the job.
  \item \code{status} The job's status.
  \item \code{tags} A list of tags for the job.
  \item \code{title} A list of tags for the job.
}
}
\examples{
\dontrun{
# initialize a 'job' object for an existing job
job <- Job$new(id = "examplejobid")
job
## add data to job
job$add_data(data.frame(x = 1:3))
## get and set a job's title
job$title
job$title <- "New Title"
job$title

## control job
job$launch()
job$pause()
job$resume()
job$cancel()

## get results
job$get_results()

# initialize a 'contributor' object
worker <- job$contributor("example_contributor")
## notify the worker
worker$notify("Hello, worker!")
}
}
\seealso{
\code{\link{job_create}}
}
\keyword{datasets}

